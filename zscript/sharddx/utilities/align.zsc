// Copyright 2017 - 2020 Nash Muhandes
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

extend class SHDX_Utilities
{
	// By Nash and ZZYZX, needs updated...
    static play void AlignToSlope(Actor self, double dAng, double dPitch)
    {
		vector3 fNormal = self.CurSector.FloorPlane.Normal;
		vector2 fNormalP1 = (fNormal.X != 0 || fNormal.Y != 0) ? (fNormal.X, fNormal.Y).Unit() : (0, 0);
		vector2 fNormalP2 = ((fNormal.X, fNormal.Y).Length(), fNormal.Z);
       
		double fAng = atan2(fNormalP1.Y, fNormalP1.X);		// floor angle (not pitch!)
		double fPitch = atan2(fNormalP2.X, fNormalP2.Y);	// floor pitch
		double dDiff1 = sin(fAng - (dAng + dPitch));
		double dDiff2 = cos(fAng - dAng);
		
		self.Pitch = fPitch * dDiff2 + dPitch;
		self.Roll = fPitch * dDiff1;
		self.Angle = dAng;
    }
}