/*
Copyright 2020 Sanya K. Waffles

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/


Class SHDX_ZombieSpawner : RandomSpawner
{
	Default
	{
		//$Category "Monsters"
		//$Sprite ZMBIH0
		//$Title "Zombie (Random)"
		scale 0.12;
		Radius 20;
		Height 56;
		DropItem "SHDX_ZombieNormal";
		DropItem "SHDX_ZombieExplosive";
	}
}

Class SHDX_ZombieGibProjectile : SHDX_Projectile
{
	Default
	{
		Radius 8;
		Height 8;
		Speed 8;
		FastSpeed 10;
		Damage 4;
		Mass 30;
		SeeSound "zombie/attack";
		DeathSound "zombie/shotx";
		Scale 0.1;
		Obituary "$SHDX_OB_ZOMBIEGIB";
	}

	States
	{
		Spawn:
			ZGIB AB 2 Bright;
			ZGIB A 0
			{
				bNoGravity = true;
			}
		Spawn1:
			ZGIB BCAB 2;
			Loop;
		
		Death:
			BLOD ABCDE 6;
			Stop;
	}
}

Class SHDX_ZombieNormal : SHDX_Enemy
{
	Default
	{
		//$Category "Monsters"
		//$Sprite ZMBIA0
		//$Title "Zombie (Normal)"
		SeeSound "zombie/sight";
		PainSound "zombie/pain";
		ActiveSound "zombie/active";
		Health 10;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 8;
		
		DamageFactor "Normal", 0.0;
		DamageFactor "Bullet", 0.0;
		DamageFactor "Chicken", 1.00;
		DamageFactor "ChickenX", 1.00;
		DamageFactor "Weather", 1.00;
		DamageFactor "RainbowerX", 1.00;
		DamageFactor "Explosive", 1.00;
		
		PainChance 80;
		PainChance "Normal", 80;
		PainChance "Bullet", 80;
		PainChance "ChickenX", 0;
		PainChance "RainbowerX", 0;
		PainChance "Explosive", 0;
		
		Obituary "$SHDX_OB_ZOMBIE";
		Tag "$SHDX_TAG_ZOMBIE";
		
		+AllowPain
		-SHDX_Enemy.CanJump
	}
	// Purrmoid Pain
	void A_DD2_ZombiePain()
	{
		A_Pain();
		bNotAutoAimed = true;
		bNoPain = true;
	}
	
	// Purrmoid 'coming out of it'
	void A_DD2_ZombieUnPain()
	{
		bNotAutoAimed = false;
		bNoPain = false;
	}
	
	States
	{	
		Spawn:
			ZMBI A 10 A_Look;
			loop;
		See:
			ZMBI BCDEBCDE 6 A_Chase;
			Loop;
		Melee:
			ZMBI F 10 A_FaceTarget;
			ZMBI G 8;
			ZMBI H 4 A_CustomMeleeAttack(Random[Zombie](3, 12), "zombie/melee", "zombie/miss", 'Melee', true);
			Goto See;
		Missile:
			ZMBI I 10 A_FaceTarget;
			ZMBI J 6;
			ZMBI K 4 A_SpawnProjectile("SHDX_ZombieGibProjectile");
			Goto See;
		Pain:
		Pain.Normal:
		Pain.Bullet:
			ZMBI L 3 A_DD2_ZombiePain();		// feign death...
			ZMBI LMNO 3;
			ZMBI P 35 A_SetTics((35 * random[Zombie](4,6)));	// make it feign death
			ZMBI P 2 A_StartSound(SeeSound, CHAN_BODY);
			ZMBI ONM 2;
 			ZMBI L 1 A_DD2_ZombieUnPain();	// resurrect!
			Goto See;
		
		Death:
		Death.Explosive:
		Death.Weather:
		Death.Extreme:
		XDeath:
			GIBX B 3
			{
				A_SHDX_ExtremeScreamAndUnblock();
				A_SpawnGibsFx(self);
			}
			GIBX B 0 A_SHDX_GivePlayerOneLiner(SHDX_ONELINER_GIB_CHANCE);
			GIBX BC 5;
			GIBX D -1;
			Stop;
		Death.RainbowerX:
			GIBR A 4;
			GIBR B 0 A_SHDX_GivePlayerOneLiner(SHDX_ONELINER_GIB_CHANCE);
			GIBR BC 4;
			GIBR D -1;
			Stop;
		Crush:
			GIBX D 0 A_SHDX_SquishSound;
			// GIBX D 1 A_SHDX_GivePlayerOneLiner;
			GIBX D -1;
			Stop;
	}
}

Class SHDX_ZombieExplosive : SHDX_Enemy
{
	Default
	{
		//$Category "Monsters"
		//$Sprite ZMBIE0
		//$Title "Zombie (Explosive)"
		Health 30;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 12;
		
		Translation "96:111=64:79";
		
		Obituary "$SHDX_OB_EXPLODINGZOMBIE";
		Tag "$SHDX_TAG_EXPLODINGZOMBIE";
		
		+NoPain
		-SHDX_Enemy.CanJump
	}
	
	int startingtranslation;
	bool giveoneliner;
	
	override void BeginPlay()
	{
		startingtranslation = translation;
		Super.BeginPlay();	// hmmm...
	}
	
	States
	{	
		Spawn:
			ZMBI A 10 A_Look;
			loop;
		See:
			ZMBI B 0 A_StartSound("zombie2/scream", CHAN_BODY, CHANF_LOOPING);
		See1:
			ZMBI BCDEBCDE 2 A_Chase("Melee", null);
			Loop;
		
		Melee:
			ZMBI E 5 A_SetTranslation('ExplodingZombie2');
			ZMBI E 5 A_SetTranslation('ExplodingZombie3');
			ZMBI E 5
			{
				if (target && Distance3D(target) <= 128)
				{
					return ResolveStatE("Melee.Detonate");
				}
				return ResolveState(null);
			}
			ZMBI E 5 A_SetTranslation('ExplodingZombie3');
			ZMBI E 5 A_SetTranslation('ExplodingZombie2');
			ZMBI E 0
			{
				translation = startingtranslation;
			}
			Goto See1;
		Melee.Detonate:

			ZMBI E 5 A_SetTranslation('ExplodingZombie4');
			ZMBI E 1 A_Die('Detonate');
		Death.Detonate:
			GIBX A 0
			{
				giveoneliner = false;
			}
		Death:
			GIBX A 3
			{
				A_StopSound(CHAN_BODY);
				A_SHDX_ExtremeScreamAndUnblock();
				SHDX_Utilities.DoExplosion(self, 128, 64, 128, flags:DE_NOTMISSILE);
				A_SpawnItemEx("SHDX_Explosiveness", 0, 0, 16);
				A_SpawnGibsFx(self);
			}
			GIBX B 0
			{
				if (!giveoneliner)
					A_SHDX_GivePlayerOneLiner(SHDX_ONELINER_GIB_CHANCE);
			}
			GIBX BC 5;
			GIBX D -1;
			Stop;
		Death.RainbowerX:
			GIBR A 4;
			GIBR B 0 A_SHDX_GivePlayerOneLiner(SHDX_ONELINER_GIB_CHANCE);
			GIBR BC 4;
			GIBR D -1;
			Stop;
		Crush:
			GIBX D 0 A_SHDX_SquishSound;
			// GIBX D 1 A_SHDX_GivePlayerOneLiner;
			GIBX D -1;
			Stop;
	}
}