/*
Copyright 2020 Sanya K. Waffles

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

Class SHDX_AtmosphereTornado : SHDX_SurpriseTornado
{
	Default
	{
		Radius 16;
		Height 56;
		Speed 10;
		Damage 10;
	}
	
	States
	{
		Spawn:
			TORN A 0
			{
				A_SeekerMissile(1, 24);
				A_StartSound("boss2/tornado", CHAN_BODY);
			}
			TORN ABCD 1;
			Loop;
		Death:
			TORN A 0
			{
				A_FadeTo(0.0, 0.1, true);
				A_SetScale((scale.X-0.1), scale.Y);
			}
			TORN ABCD 3;
			loop;
	}
}

Class SHDX_FloorArc : SHDX_Projectile
{
	Default
	{
		Radius 16;
		Height 56;
		Speed 8;
		Damage 8;
		+MISSILE
		+DROPOFF
		+RIPPER
		+NOEXPLODEFLOOR
		+STEPMISSILE
		MaxStepHeight 16;
		Projectile;
		+SEEKERMISSILE
		+FLOORHUGGER
		
		DamageType "Lightning";
	}
	States
	{
		Spawn:
			ATLX A 0
			{
				A_SeekerMissile(1, 15);
				A_StartSound("misc/arc", CHAN_BODY);
			}
			ATLX ABAB 1;
			Loop;
		Death:
			ATLX A 0
			{
				A_FadeTo(0.0, 0.1, true);
				A_SetScale((scale.X-0.1), scale.Y);
			}
			ATLX AB 1;
			loop;
	}
}

Class SHDX_DrAtmosphereBoss : SHDX_Boss
{
	Default
	{
		//$Category "Monsters"
		//$Sprite ATMOA0
		//$Title "Boss 2 - Dr Atmosphere"
		
		Health 3000;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 12;
		PainChance "Explosive", 256;
		PainChance "Bullet", 256;
		DamageFactor "Bullet", 0.05;
		DamageFactor "Explosive", 0.75;
		DamageFactor "Chicken", 0.00;
		DamageFactor "ChickenX", 0.00;
		DamageFactor "Rainbower", 0.10;
		DamageFactor "RainbowerX", 0.10;
		DamageFactor "Ice", 0.00;
		SeeSound "boss2/sight";
		PainSound "boss2/pain";
		DeathSound "boss2/death";
		Obituary "$SHDX_OB_DRATMOS";
		Tag "$SHDX_TAG_DRATMOS";
		
		+DONTRIP
		+NOICEDEATH
		
		
		+SHDX_Boss.TriggerLevelEnd
		+SHDX_Boss.TriggerCutscene
		
		SHDX_Boss.CutsceneToPlay 'EndEpisode2';
	}
	
	int flyingmode;
	
	const ATMOSFLY = 20;
	
	void A_FlyTowardsTarget(double speedtofly = ATMOSFLY)
	{
		if (!target) return;
		
		if (speedtofly <= 0) speedtofly = ATMOSFLY;
		
		A_FaceTarget();
		
		VelFromAngle(speedtofly);
		Vel.Z = (target.pos.Z + target.Height/2 - pos.Z) / DistanceBySpeed(target, speedtofly);
	}
	
	void A_SpawnZombiesFromSpots()
	{
		ThinkerIterator deadraiserit = ThinkerIterator.Create("SHDX_ZombieSpot");
		SHDX_ZombieSpot raiserspot;
		
		// iterate through the spots
		while (raiserspot = SHDX_ZombieSpot(deadraiserit.Next()))
		{
			// if spot exists
			if (raiserspot)
			{
				raiserspot.SetStateLabel("RaiseTheDead");
			}
		}
	}
	
	void A_KillZombiesAfter()
	{
		ThinkerIterator zombieit = ThinkerIterator.Create("SHDX_ZombieNormal");
		SHDX_ZombieNormal zom;
		
		// iterate through the spots
		while (zom = SHDX_ZombieNormal(zombieit.Next()))
		{
			// if spot exists
			if (zom)
			{
				zom.A_Die('Extreme');
			}
		}
	}
	
	// Check for items to steal
	bool A_CheckZombieCount()
	{
		let hndlr = SHDX_AtmosphereHandler(EventHandler.Find("SHDX_AtmosphereHandler"));
		if (hndlr)
		{
			if (hndlr.zombies.Size() >= 15)
			{
				return true;
			}
		}
		
		return false;
	}
	
	void A_AtmosphereSetBossMusic()
	{
		S_ChangeMusic("M_ATMO");
	}
	
	void A_AtmosphereTaunt()
	{
		A_SHDX_PlayBossTaunt("boss2/taunt"..Random[DrAtmosphere](1,11));
	}
	
	override void MarkPreCacheSounds()
	{
		Super.MarkPreCacheSounds();
		Sound snd;
		for (int i = 1; i < 12; i++)
		{
			snd = String.Format("boss2/taunt%d", i);
			MarkSound(snd);
		}
	}
	
	void A_FlapWings()
	{
		A_StartSound("boss2/wings", CHAN_6);
	}
	
	States
	{
		Spawn:
			ATMO A 10 A_Look;
			Loop;
		See:
			ATMO A 0
			{
				A_SetInvulnerable();
				A_AtmosphereSetBossMusic();
				bCanJump = false;
			}
			ATMO A 425;
		See1:
			ATMO B 0
			{
				A_SHDX_SendOLToAllPlayers("atmospherestart", OLSSF_FORCEONELINER);
				A_SHDX_SetToBossBarHUD();
				A_UnSetInvulnerable();
				bCanJump = true;
			}
		See2:
			ATMO B 0
			{
				if (flyingmode >= 1)
					return ResolveState("See2.Flying");
				
				return ResolveState(null);
			}
			ATMO BCDCBCD 2 A_Chase;
			ATMO E 0 A_Jump(32, "StartFlying");
			Loop;
		See2.Flying:
			ATMO E 4
			{
				A_Chase(null, "Missile.Flying");
				A_FlapWings();
			}
			ATMO FGH 4
			{
				A_Chase(null, "Missile.Flying");
			}
			ATMO E 4
			{
				A_Chase(null, "Missile.Flying");
				A_FlapWings();
			}
			ATMO FGH 4
			{
				A_Chase(null, "Missile.Flying");
			}
			ATMO H 0
			{
				flyingmode++;
				if (flyingmode >= 15)
					return ResolveState("StopFlying");
					
				return ResolveState(null);
			}
			Loop;
		StartFlying:
			ATMO E 0
			{
				bNoGravity = true;
				bFloat = true;
				bCanJump = false;
				flyingmode = 1;
			}
			Goto See2.Flying;
		Missile:
			ATMO M 0 A_Jump(256, "Missile.Stomp", "Missile.TriIce", "Missile.Ice");
		Missile.Ice:
			ATMO M 0 A_AtmosphereTaunt;
			ATMO M 5 A_FaceTarget;
			ATMO N 2 Bright A_SpawnProjectile("SHDX_AtmosphereHailBall");
			ATMO OM 2;
			ATMO N 2 Bright A_SpawnProjectile("SHDX_AtmosphereHailBall");
			ATMO OM 2;
			ATMO N 2 Bright A_SpawnProjectile("SHDX_AtmosphereHailBall");
			ATMO OM 2;
			goto See2;
		Missile.TriIce:
			ATMO M 0 A_AtmosphereTaunt;
			ATMO M 10 A_FaceTarget;
			ATMO N 4 Bright
			{
				for (int i = -32; i < 32; i += 16)
				{
					A_SpawnProjectile("SHDX_AtmosphereHailBall", angle:i);
				}
			}
			ATMO O 5 Bright;
			goto See2;
		Missile.Stomp:
			ATMO P 4 A_AtmosphereTaunt;
			ATMO Q 5;
			ATMO Q 0 A_StartSound("boss2/stomp", CHAN_BODY);
			ATMO Q 0 A_Jump(256, "Missile.Stomp.Electric", "Missile.Stomp.Tornado", "Missile.Stomp.RaiseTheDead");
		Missile.Stomp.Electric:
			ATMO R 8
			{
				A_SpawnProjectile("SHDX_FloorArc", spawnofs_xy: -32);
				A_SpawnProjectile("SHDX_FloorArc");
				A_SpawnProjectile("SHDX_FloorArc", spawnofs_xy: 32);
			}
			Goto See2;
		Missile.Stomp.Tornado:
			ATMO S 8
			{
				A_SpawnProjectile("SHDX_AtmosphereTornado");
			}
			Goto See2;
		Missile.Stomp.RaiseTheDead:
			ATMO T 0
			{
				if (A_CheckZombieCount())
					return ResolveState("Missile.Stomp.Tornado");
					
				return ResolveState(null);
			}
			ATMO T 0 A_SHDX_PlayBossTaunt("boss2/risetaunt", true);
			ATMO T 8 A_SpawnZombiesFromSpots();
			ATMO T 15;
			Goto See2;
		Missile.Flying:
			ATMO H 0 A_AtmosphereTaunt;
			ATMO H 5
			{
				A_FaceTarget();
				A_StartSound("boss2/charge", CHAN_7);
				A_FlapWings();
			}
			ATMO I 2 Bright
			{
				A_SpawnProjectile("SHDX_AtmosphereHailBall");
				A_FlyTowardsTarget(15);
			}
			ATMO IJ 2
			{
				A_FlyTowardsTarget(15);
			}
			ATMO K 2 Bright
			{
				A_SpawnProjectile("SHDX_AtmosphereHailBall");
				A_FlyTowardsTarget(15);
			}
			ATMO L 2;
			goto See2;
		Pain:
			ATMO A 0
			{
				if (flyingmode >= 1)
				{
					return ResolveState("Pain.Flying");
				}
				
				return ResolveState(null);
			}
		Pain1:
			ATMO U 3
			{
				A_Pain();
				A_SetRenderStyle(1.0, STYLE_Stencil);
				SetShade("6e0600");
			}
			ATMO U 2
			{
				SetShade("f08010");
			}
			ATMO U 1
			{
				SetShade("ffee6a");
			}
			ATMO U 0
			{
				A_SetRenderStyle(1.0, STYLE_Normal);
				SetShade("ffffff");
			}
			Goto See2;
		Pain.Flying:
			ATMO E 3
			{
				A_Pain();
				A_SetRenderStyle(1.0, STYLE_Stencil);
				SetShade("6e0600");
			}
			ATMO F 2
			{
				SetShade("f08010");
			}
			ATMO G 1
			{
				SetShade("ffee6a");
			}
			ATMO H 0
			{
				A_SetRenderStyle(1.0, STYLE_Normal);
				SetShade("ffffff");
			}
			Goto StopFlying;
		StopFlying:
			ATMO H 0
			{
				flyingmode = 0;
				bNoGravity = false;
				bFloat = false;
				bCanJump = true;
			}
			Goto Missile;
		Death.Explosive:
		Death.Weather:
		Death.RainbowX:
		XDeath:
		Death:
			ATMO U 0
			{
				A_KillZombiesAfter();
				A_SetRenderStyle(1.0, STYLE_Normal);
				SetShade("ffffff");
			}
			ATMO U 0
			{
				A_NewBossScream();
				A_VictoryMusic();
			}
			ATMO U 105;
			ATMO U 5;
			ATMO V 5 A_SpawnGibsFx(self);
			ATMO WX 5;
			ATMO Y 0 A_SHDX_SendOLToAllPlayers("atmosphereend", OLSSF_FORCEONELINER);
			ATMO Y 220;
			ATMO Y 1 A_DD2_BossPlayCutscene();
			ATMO Y -1 A_DD2_BossEndLevel();
			Stop;
	}
}

Class SHDX_AtmosphereHailBall : SHDX_Projectile
{
	Default
	{
		Radius 11;
		Height 8;
		Speed 20;
		Damage 4;
		Projectile;
		+RANDOMIZE
		DamageType "Ice";
		SeeSound "weapons/hailf";
		DeathSound "weapons/hailx";
	}
	States
	{
		Spawn:
			HAIL A 1;
			Loop;
		Death:
			HAIL B 2;
			Stop;
	}
}