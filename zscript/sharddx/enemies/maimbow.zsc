/*
Copyright 2020 Sanya K. Waffles

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

Class SHDX_MaimbowMissile : SHDX_Missile
{
	Default
	{
		Radius 11;
		Height 8;
		Speed 20;
		Damage 6;
		Projectile;
		+RANDOMIZE
		DamageType "Explosive";
		// SeeSound "weapons/rocketf";
		DeathSound "weapons/rocketx";
	}
	
	States
	{
		Spawn:
			MISL A 1 Bright;
			Loop;
		
		Death:
			EXPL A 0 Bright
			{
				SHDX_Utilities.DoExplosion(self, 16, 32, 24, DamageType:'Explosive');
			}
			EXPL A 3 Bright A_Quake(2, 8, 0, 1096);
			EXPL BCDEFGHI 3 Bright;
			Stop;
	}
}

Class SHDX_MaimbowBullet : FastProjectile
{
	Default
	{
		Speed 120;
		Radius 8;
		Height 8;
		DamageFunction Random[Maimbow](5,7);
		DamageType "Bullet";
		Scale 0.12;
		MissileType "SHDX_BulletTrail";
		MissileHeight 8;
		RenderStyle "Translucent";
		Alpha 0.667;
		
		+CANNOTPUSH
		+NODAMAGETHRUST
		+SPAWNSOUNDSOURCE
		//+ALLOWTHRUFLAGS
		//+THRUSPECIES
		//+MTHRUSPECIES
		+BloodSplatter
	}
	States
	{
		Spawn:
			BULL A 4 Bright;
			Loop;
		Death:
			PUFF ABCD 4 Bright;
			Stop;
	}
}

Class SHDX_RainbowFloorArc : SHDX_Projectile
{
	Default
	{
		Radius 16;
		Height 56;
		Speed 12;
		Damage 8;
		+MISSILE
		+DROPOFF
		+RIPPER
		+NOEXPLODEFLOOR
		+STEPMISSILE
		MaxStepHeight 16;
		Projectile;
		+FLOORHUGGER
		
		DamageType "RainbowX";
		
		RenderStyle "Add";
		Alpha 0.67;
		
		SeeSound "weapons/rainbower2";
		DeathSound "weapons/rainbowerx";
	}
	States
	{
		Spawn:
			RBOW A 1;
			Loop;
		Death:
			TNT1 A 0;
			Stop;
	}
}

Class SHDX_MaimbowUndashBoss : SHDX_Boss
{
	Default
	{
		//$Category "Monsters"
		//$Sprite MBOWA1
		//$Title "Boss 3 - Maimbow Undash"
		
		Health 3500;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 12;
		PainChance "Explosive", 256;
		PainChance "Bullet", 128;
		PainChance "Spectrum", 256;
		PainChance "Lightning", 128;
		PainChance "Ice", 64;
		DamageFactor "Bullet", 0.50;
		DamageFactor "Explosive", 0.75;
		DamageFactor "Chicken", 0.00;
		DamageFactor "ChickenX", 0.00;
		DamageFactor "Spectrum", 0.10;
		DamageFactor "Ice", 0.35;
		SeeSound "maimbow/sight";
		DeathSound "maimbow/death";
		Obituary "$SHDX_OB_MAIMBOW";
		Tag "$SHDX_TAG_MAIMBOW";
		
		+DONTRIP
		+NOICEDEATH
	}
	
	int flyingmode;
	bool isactive;
	
	int maimbowstage;
	
	const MAIMBOWFLY = 20;
	
	void A_FlyTowardsTarget(double speedtofly = MAIMBOWFLY)
	{
		if (!target) return;
		
		if (speedtofly <= 0) speedtofly = MAIMBOWFLY;
		
		A_FaceTarget();
		
		VelFromAngle(speedtofly);
		Vel.Z = (target.pos.Z + target.Height/2 - pos.Z) / DistanceBySpeed(target, speedtofly);
	}
	
	void A_MaimbowFireTwoRocketMissiles()
	{
		A_SpawnProjectile("SHDX_MaimbowMissile", spawnofs_xy:-12);
		A_SpawnProjectile("SHDX_MaimbowMissile", spawnofs_xy:12);
	}
	
	void A_MaimbowFireRainbower()
	{
		A_StartSound("weapons/rainbowerf", CHAN_WEAPON);
		A_SpawnProjectile("SHDX_RainbowerProjectileA");
	}
	
	void A_MaimbowFireChaingunWithSound()
	{
		A_StartSound("maimbow/chaingun", CHAN_WEAPON);
		A_SpawnProjectile("SHDX_MaimbowBullet", 32);
	}
	
	void A_MaimbowTaunt()
	{
		A_SHDX_PlayBossTaunt("maimbow/taunt"..Random[Maimbow](1,16));
	}
	
	void A_SetMaimbowStage1()
	{
		SetStateLabel("MaimbowTeleport1");
		maimbowstage = 1;
	}
	
	void A_SetMaimbowStage2()
	{
		SetStateLabel("MaimbowTeleport2");
		maimbowstage = 2;
	}
	
	void A_DD2_MaimbowBossPlayCutscene()
	{
		if (shdx_skipcutscenes)
			return;
		
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			PlayerInfo pl = players[i];
			if (pl && pl.mo && pl.mo.CountInv("SHDX_FoundAurora"))
			{
				A_DD2_MaimbowPlayAuroraFoundCutscene();
				return;
			}
		}
		
		A_DD2_MaimbowPlayAuroraNotFoundCutscene();
	}
	
	void A_DD2_MaimbowPlayAuroraFoundCutscene()
	{
		level.StartSlideShow('EndEpisode3Aurora');
	}
	
	void A_DD2_MaimbowPlayAuroraNotFoundCutscene()
	{
		level.StartSlideShow('EndEpisode3NoAurora');
	}
	
	void A_DD2_MaimbowBossEndLevel()
	{
		level.ExitLevel(0, false);
	}
	
	void A_MaimbowSetBossMusic()
	{
		S_ChangeMusic("M_ATMO");
	}
	
	void A_MaimbowVictoryMusic()
	{
		S_ChangeMusic("M_ATVIC", 0, false);
	}
	
	void A_FlapWings()
	{
		A_StartSound("maimbow/wings", CHAN_6);
	}
	
	override void Tick()
	{
		Super.Tick();
		if (flyingmode > 0)
			isflying = true;
		else
			isflying = false;
	}
	
	override void MarkPreCacheSounds()
	{
		Super.MarkPreCacheSounds();
		Sound snd;
		for (int i = 1; i < 17; i++)
		{
			snd = String.Format("maimbow/taunt%d", i);
			MarkSound(snd);
		}
	}
	
	States
	{
		Spawn:
			MBOW A 10
			{
				A_SetInvulnerable();
				A_Look();
				A_RemoveLight('maimbowlight');
				isactive = false;
			}
			Loop;
		See:
			MBOW A 0
			{
				A_MaimbowSetBossMusic();
				bCanJump = false;
			}
			MBOW A 50;
		See1:
			MBOW B 0
			{
				// A_SHDX_SendOLToAllPlayers("maimbowundashstart", OLSSF_FORCEONELINER);
				A_UnSetInvulnerable();
				A_SHDX_SetToBossBarHUD();
				bCanJump = true;
				isactive = true;
				A_AttachLightDef('maimbowlight', 'SHDX_BOSSLIGHT');
			}
		See2:
			MBOW K 0
			{
				if (flyingmode >= 1)
					return ResolveState("See2.Flying");
				
				return ResolveState(null);
			}
			// MBOW B 0 A_StartSound("pony/walk2", CHAN_BODY);
			MBOW BCDE 2 A_Chase;
			// MBOW B 0 A_StartSound("pony/walk2", CHAN_BODY);
			MBOW BCDE 2 A_Chase;
			MBOW E 0 A_Jump(32, "StartFlying");
			Loop;
		See2.Flying:
			MBOW K 4
			{
				A_FlapWings();
				A_Chase(null, "Missile.Flying");
			}
			MBOW LMN 4 A_Chase(null, "Missile.Flying");
			MBOW N 0
			{
				flyingmode++;
				if (flyingmode >= 15)
					return ResolveState("StopFlying");
					
				return ResolveState(null);
			}
			Loop;
		StartFlying:
			MBOW K 0
			{
				bNoGravity = true;
				bFloat = true;
				bCanJump = false;
				flyingmode = 1;
			}
			Goto See2.Flying;
		Missile:
			MBOW I 0
			{
				if (maimbowstage == 2)
					return ResolveState("Missile2");
				
				return ResolveState("Missile1");
			}
		Missile1:
			MBOW M 0 A_Jump(256, "Missile.Stomp", "Missile.Rocket", "Missile.Chaingun");
		Missile2:
			MBOW M 0 A_Jump(256, "Missile.Stomp", "Missile.Rocket", "Missile.Chaingun", "Missile.Rainbower");
		Missile.Chaingun:
			// ATMO M 0 A_StartSound("boss2/ice", CHAN_VOICE);
			MBOW A 7
			{
				A_FaceTarget();
				A_MaimbowTaunt();
			}
			MBOW H 2 Bright A_MaimbowFireChaingunWithSound;
			MBOW I 3 Bright;
			MBOW H 2 Bright A_MaimbowFireChaingunWithSound;
			MBOW I 3 Bright;
			MBOW H 2 Bright A_MaimbowFireChaingunWithSound;
			MBOW I 3 Bright;
			MBOW H 2 Bright A_MaimbowFireChaingunWithSound;
			MBOW I 3 Bright;
			goto See2;
		Missile.Rocket:
			// ATMO M 0 A_StartSound("boss2/triice", CHAN_VOICE);
			MBOW A 10 A_FaceTarget;
			MBOW F 4 Bright A_MaimbowFireTwoRocketMissiles;
			MBOW G 5 Bright;
			goto See2;
		Missile.Rainbower:
			// ATMO M 0 A_StartSound("boss2/triice", CHAN_VOICE);
			MBOW A 10 A_FaceTarget;
			MBOW F 4 Bright A_MaimbowFireRainbower;
			MBOW G 5 Bright;
			goto See2;
		Missile.Stomp:
			MBOW Z 4;
			MBOW Z 5;
			MBOW Z 0 A_StartSound("boss2/stomp", CHAN_BODY);
			MBOW I 0
			{
				if (maimbowstage == 2)
					return ResolveState("Missile.Stomp2");
				else if (maimbowstage == 1)
					return ResolveState("Missile.Stomp1");
				
				return ResolveState("Missile.Stomp0");
			}
		Missile.Stomp2:
			MBOW Z 0 A_Jump(256, "Missile.Stomp.Electric", "Missile.Stomp.RainbowX", "Missile.Stomp.Tornado");
		Missile.Stomp1:
			MBOW Z 0 A_Jump(256, "Missile.Stomp.Electric", "Missile.Stomp.Tornado");
		Missile.Stomp0:
			MBOW Z 0 A_Jump(256, "Missile.Stomp.Electric");
		Missile.Stomp.Electric:
			MBOW "[" 8
			{
				A_SpawnProjectile("SHDX_FloorArc", spawnofs_xy: -32);
				A_SpawnProjectile("SHDX_FloorArc");
				A_SpawnProjectile("SHDX_FloorArc", spawnofs_xy: 32);
			}
			Goto See2;
		Missile.Stomp.RainbowX:
			MBOW "[" 8
			{
				A_SpawnProjectile("SHDX_RainbowFloorArc", spawnofs_xy: -64, angle: -32);
				A_SpawnProjectile("SHDX_RainbowFloorArc", spawnofs_xy: -32, angle: -16);
				A_SpawnProjectile("SHDX_RainbowFloorArc");
				A_SpawnProjectile("SHDX_RainbowFloorArc", spawnofs_xy: 32, angle:16);
				A_SpawnProjectile("SHDX_RainbowFloorArc", spawnofs_xy: 32, angle:32);
			}
			Goto See2;
		Missile.Stomp.Tornado:
			MBOW [ 8
			{
				A_SpawnProjectile("SHDX_AtmosphereTornado");
			}
			Goto See2;
		Missile.Flying:
			MBOW I 0
			{
				if (maimbowstage == 2)
					return ResolveState("Missile.Flying2");
				else if (maimbowstage == 1)
					return ResolveState("Missile.Flying1");
				
				return ResolveState("Missile.Flying0");
			}
		Missile.Flying2:
			MBOW I 0 A_Jump(256, "Missile.Flying.Rocket", "Missile.Flying.Chaingun", "Missile.Flying.Rainbower");
		Missile.Flying1:
			MBOW I 0 A_Jump(256, "Missile.Flying.Rocket", "Missile.Flying.Chaingun");
		Missile.Flying0:
			MBOW I 0 A_Jump(256, "Missile.Flying.Chaingun");
		Missile.Flying.Chaingun:
			MBOW O 0
			{
				A_MaimbowTaunt();
				A_FaceTarget();
			}
			MBOW KLMN 1 A_FaceTarget;
			MBOW Q 0 A_StartSound("maimbow/charge", CHAN_7);
			MBOW R 2 Bright
			{
				A_MaimbowFireChaingunWithSound();
				A_FlyTowardsTarget();
				A_FlapWings();
			}
			MBOW S 2 Bright
			{
				A_FlyTowardsTarget();
			}
			MBOW T 2
			{
				A_FlyTowardsTarget();
			}
			MBOW Q 5
			{
				A_FaceTarget();
			}
			MBOW R 2 Bright
			{
				A_MaimbowFireChaingunWithSound();
				A_FlyTowardsTarget();
				A_FlapWings();
			}
			MBOW S 2 Bright
			{
				A_FlyTowardsTarget();
			}
			MBOW T 2
			{
				A_FlyTowardsTarget();
			}
			MBOW Q 5
			{
				A_FlyTowardsTarget();
			}
			MBOW R 2 Bright
			{
				A_MaimbowFireChaingunWithSound();
				A_FlyTowardsTarget();
				A_FlapWings();
			}
			MBOW S 2 Bright
			{
				A_FlyTowardsTarget();
			}
			MBOW T 2
			{
				A_FlyTowardsTarget();
			}
			goto See2;
		Missile.Flying.Rocket:
			MBOW V 5
			{
				A_FaceTarget();
			}
			MBOW W 2 Bright
			{
				A_MaimbowFireTwoRocketMissiles();
				A_FlyTowardsTarget();
				A_FlapWings();
			}
			MBOW X 2 Bright
			{
				A_FlyTowardsTarget();
			}
			MBOW Y 2
			{
				A_FlyTowardsTarget();
			}
			goto See2;
		Missile.Flying.Rocket:
			MBOW V 5
			{
				A_FaceTarget();
			}
			MBOW W 2 Bright
			{
				A_MaimbowFireRainbower();
				A_FlyTowardsTarget();
				A_FlapWings();
			}
			MBOW X 2 Bright
			{
				A_FlyTowardsTarget();
			}
			MBOW Y 2
			{
				A_FlyTowardsTarget();
			}
			goto See2;
		
		MaimbowTeleport1:
			MBOW A 10
			{
				A_SetInvulnerable();
				A_RemoveLight('maimbowlight');
			}
			MBOW A 0
			{
				A_SHDX_PlayBossTaunt(SeeSound, true);	// TODO: Jenna needs to do more of these...
				bCanJump = false;
			}
			MBOW A 50;
			MBOW B 0
			{
				// A_SHDX_SendOLToAllPlayers("maimbowundashstart", OLSSF_FORCEONELINER);
				A_UnSetInvulnerable();
				bCanJump = true;
				A_AttachLightDef('maimbowlight', 'SHDX_BOSSLIGHT');
			}
			Goto See2;
		
		MaimbowTeleport2:
			MBOW A 10
			{
				A_SetInvulnerable();
				A_RemoveLight('maimbowlight');
			}
			MBOW A 0
			{
				A_SHDX_PlayBossTaunt(SeeSound, true);	// TODO: Jenna needs to do more of these...
				bCanJump = false;
			}
			MBOW A 50;
			MBOW B 0
			{
				// A_SHDX_SendOLToAllPlayers("maimbowundashstart", OLSSF_FORCEONELINER);
				A_UnSetInvulnerable();
				bCanJump = true;
				A_AttachLightDef('maimbowlight', 'SHDX_BOSSLIGHT');
			}
			Goto See2;
			
		Pain:
			MBO2 A 0
			{
				if (maimbowstage == 0 && health <= (SpawnHealth() * 0.667))
				{
					A_SetMaimbowStage1();
				}
				if (maimbowstage == 1 && health <= (SpawnHealth() * 0.333))
				{
					A_SetMaimbowStage2();
				}
				return ResolveState(null);
			}
			MBO2 A 0
			{
				if (flyingmode >= 1)
				{
					return ResolveState("Pain.Flying");
				}
				
				return ResolveState(null);
			}
		Pain1:
			MBOW \ 3
			{
				A_Pain();
				A_SetRenderStyle(1.0, STYLE_Stencil);
				SetShade("6e0600");
			}
			MBOW \ 2
			{
				SetShade("f08010");
			}
			MBOW \ 1
			{
				SetShade("ffee6a");
			}
			MBOW \ 0
			{
				A_SetRenderStyle(1.0, STYLE_Normal);
				SetShade("ffffff");
			}
			Goto See2;
		Pain.Flying:
			MBOW K 3
			{
				A_Pain();
				A_SetRenderStyle(1.0, STYLE_Stencil);
				SetShade("6e0600");
			}
			MBOW K 2
			{
				SetShade("f08010");
			}
			MBOW K 1
			{
				SetShade("ffee6a");
			}
			MBOW K 0
			{
				A_SetRenderStyle(1.0, STYLE_Normal);
				SetShade("ffffff");
			}
			Goto StopFlying;
		StopFlying:
			MBOW I 0
			{
				flyingmode = 0;
				bNoGravity = false;
				bFloat = false;
				bCanJump = true;
			}
			Goto Missile;
		Death.Explosive:
		Death.Weather:
		Death.Spectrum:
		XDeath:
		Death:
			MBOW \ 0
			{
				A_SetRenderStyle(1.0, STYLE_Normal);
				A_RemoveLight('maimbowlight');
				SetShade("ffffff");
			}
			MBOW \ 0
			{
				A_NewBossScream();
				A_MaimbowVictoryMusic();
			}
			MBOW \ 105;
			MBO2 A 5;
			MBO2 B 5 A_SpawnGibsFx(self);
			MBO2 CD 5;
			// ATMO Y 0 A_SHDX_GivePlayerOneLiner(SHDX_ONELINER_BOSS_CHANCE, "atmosphereend", OLSSF_FORCEONELINER);
			MBO2 E 220;
			MBO2 E 1 A_DD2_MaimbowBossPlayCutscene();
			MBO2 E -1 A_DD2_MaimbowBossEndLevel();
			Stop;
	}
}
