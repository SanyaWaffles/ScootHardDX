/*
Copyright (c) 2020 Marisa Kirisame, UnSX Team

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

/*
Copyright 2020 Sanya K. Waffles

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

class SHDX_CreditsMenu : GenericMenu
{
	int curpage, prevpage;
	int fadetic;
	int mInfoTic;
	bool isrclick;
	int pagedir;
	
	enum EHelpPage
	{
		PAGE_WIS,
		PAGE_ADD,
		NUM_CREDITS_PAGES
	}

	//=============================================================================
	//
	//
	//
	//=============================================================================
	
	override void Init(Menu parent)
	{
		Super.Init(parent);
		curpage = 0;
		prevpage = -1;
		mInfoTic = gametic;
		pagedir = 0;
	}
	
	private void DrawPage(int page, double alpha = 1.)
	{
		Font fnt = "Smallfont";
		Font bigfont = "Bigfont";
		int h = bigfont.GetHeight();
		String hdr = "", txt = "";
		BrokenLines l;
		int maxlen = 0, lh;
		double y = 0;
		switch (page)
		{
			case PAGE_WIS:
				hdr = StringTable.Localize("$SHDX_CREDITS_HEADER_WIS");
				txt = StringTable.Localize("$SHDX_CREDITS_WIS");
				break;
			case PAGE_ADD:
				hdr = StringTable.Localize("$SHDX_CREDITS_HEADER_ADD");
				txt = StringTable.Localize("$SHDX_CREDITS_ADD");
				break;
		}
		
		double hs;
		if ( (Screen.GetWidth() < 640) || (Screen.GetHeight() < 266) ) hs = max(min(floor(Screen.GetWidth()/320.),floor(Screen.GetHeight()/133.)),1.)/2.;
		else hs = max(min(floor(Screen.GetWidth()/640.),floor(Screen.GetHeight()/266.)),1.);
		Vector2 ss = (Screen.GetWidth()/hs,Screen.GetHeight()/hs);
		
		screen.DrawText(bigfont, Font.CR_RED, 0, 0, hdr,
							DTA_VirtualWidthF,  ss.x,
							DTA_VirtualHeightF, ss.y,
							DTA_KeepRatio, true);
		
		screen.DrawText(fnt, Font.CR_FIRE, 0, bigfont.GetHeight() * 1.5, txt,
							DTA_VirtualWidthF,  ss.x,
							DTA_VirtualHeightF, ss.y,
							DTA_KeepRatio, true);
							
		
		screen.DrawText(fnt, Font.CR_RED, 0, ss.y - fnt.GetHeight(), StringTable.Localize("$SHDX_HELP_MOVETIP"),
							DTA_VirtualWidthF,  ss.x,
							DTA_VirtualHeightF, ss.y,
							DTA_KeepRatio, true);
	}

	override void Drawer()
	{
		screen.Dim(0, 1.0, 0,0, screen.GetWidth(), screen.GetHeight());
		
		DrawPage(curpage);
	}
	
	//=============================================================================
	//
	//
	//
	//=============================================================================

	override bool MenuEvent(int mkey, bool fromcontroller)
	{
		switch (mkey)
		{
			case MKEY_Enter:
			case MKEY_Right:
			case MKEY_Down:
			case MKEY_PageDown:
				if ((curpage < NUM_CREDITS_PAGES - 1))
				{
					MenuSound("menu/choose");
					prevpage = curpage;
					curpage++;
					pagedir = 1;
					fadetic = gametic;
				}
				return true;
				break;
			case MKEY_Clear:
			case MKEY_Left:
			case MKEY_Up:
			case MKEY_PageUp:
				if ((curpage > 0))
				{
					MenuSound("menu/choose");
					prevpage = curpage;
					curpage--;
					pagedir = -1;
					fadetic = gametic;
				}
				return true;
				break;
		}
		return Super.MenuEvent(mkey, fromcontroller);
	}

	//=============================================================================
	//
	//
	//
	//=============================================================================

	override bool MouseEvent(int type, int x, int y)
	{
		if (type == MOUSE_Click && y != -1)
		{
			return MenuEvent(isrclick ? MKEY_Clear : MKEY_Enter, true);
		}
		return false;
	}
	
	override bool OnUIEvent(UIEvent ev)
	{
		int y;
		bool res;
		switch (ev.type)
		{
			case UIEvent.Type_WheelDown:
				return MenuEvent(MKEY_Enter, true);
				break;
			case UIEvent.Type_WheelUp:
				return MenuEvent(MKEY_Clear, true);
				break;
			case UIEvent.Type_LButtonDown:
				isrclick = false;
				return Super.OnUIEvent(ev);
			case UIEvent.Type_RButtonDown:
				isrclick = true;
				// copy over what base mnenus do for left click
				y = ev.MouseY;
				res = MouseEventBack(MOUSE_Click, ev.MouseX, y);
				if (res) y = -1;
				res |= MouseEvent(MOUSE_Click, ev.MouseX, y);
				if (res) SetCapture(true);
				return false;
				break;
			case UIEvent.Type_RButtonUp:
				// copy over what base menus do for left release
				if (mMouseCapture)
				{
					SetCapture(false);
					y = ev.MouseY;
					res = MouseEventBack(MOUSE_Release, ev.MouseX, y);
					if (res) y = -1;
					res |= MouseEvent(MOUSE_Release, ev.MouseX, y);
				}
				return false;
				break;	
		}
		return Super.OnUIEvent(ev);
	}
}