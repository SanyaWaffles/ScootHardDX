/*
Copyright 2020 Sanya K. Waffles

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/


Class SHDX_Actor : Actor
{
	Default
	{
		TeleFogSourceType "SHDX_TeleportFog";
		TeleFogDestType "SHDX_TeleportFog";
		
		Scale 0.12;
		
		BloodType "SHDX_Blood", "SHDX_Blood", "SHDX_Blood";
	}
	
	static void A_DD2_SpawnGib(Actor self, Class<Actor> gibtype = "SHDX_Giblets", bool dontthrust = false)
	{
		Actor a;
		
		if (!self)
			return;
			
		Vector3 vel3;
		
		Vector3 pos3;
		pos3.x = self.pos.x + Random[GibFx](-16, 16);
		pos3.y = self.pos.y + Random[GibFx](-16, 16);
		pos3.z = self.pos.z + Random[GibFx](-16, 16);
		
		if (!dontthrust)
		{
			vel3.x = self.vel.x + FRandom[GibFx](-32, 32);
			vel3.y = self.vel.y + FRandom[GibFx](-32, 32);
			vel3.z = self.vel.z + FRandom[GibFx](0, 90);
		}
		else
		{
			vel3.x = 0;
			vel3.y = 0;
			vel3.z = 0;
		}
		
		a = self.Spawn(gibtype, pos3, ALLOW_REPLACE);
		
		a.vel = vel3;
		a.A_FaceMovementDirection();
	}
	
	static void A_SpawnGibsFx(Actor self)
	{
		if (!self)
			return;
		
		for (int i = 0; i < 23; i++)
		{
			A_DD2_SpawnGib(self, "SHDX_WallGib");
		}
		
		for (int i = 0; i < 28; i++)
		{
			A_DD2_SpawnGib(self, "SHDX_Giblets");
		}
		
		for (int i = 0; i < 4; i++)
		{
			A_DD2_SpawnGib(self, "SHDX_BoneGibs");
		}
	}
	
	static void A_SpawnAshFx(Actor self)
	{
		if (!self)
			return;
			
		for (int i = 0; i < 20; i++)
		{
			self.A_SpawnItemEx("SHDX_AshGibs", 0, 0, 32, Random[AshFx](3.0, 5.0), Random[AshFx](3.0, 5.0), Random[AshFx](3.0, 5.0), Random[AshFx](0.0, 360.0), SXF_ABSOLUTEANGLE);
		}
	}
	
	static void A_SpawnMetalJunkFx(Actor self)
	{
		if (!self)
			return;
			
		for (int i = 0; i < 32; i++)
		{
			self.A_SpawnItemEx("SHDX_MetalJunk", 0, 0, 32, Random[JunkFx](3.0, 5.0), Random[AshFx](3.0, 5.0), Random[AshFx](3.0, 5.0), Random[AshFx](0.0, 360.0), SXF_ABSOLUTEANGLE);
		}
	}
	
	static void A_SpawnGlassJunkFx(Actor self)
	{
		if (!self)
			return;
			
		for (int i = 0; i < 32; i++)
		{
			self.A_SpawnItemEx("SHDX_GlassJunk", 0, 0, 32, Random[JunkFx](3.0, 5.0), Random[AshFx](3.0, 5.0), Random[AshFx](3.0, 5.0), Random[AshFx](0.0, 360.0), SXF_ABSOLUTEANGLE);
		}
	}
	
	static void A_SpawnChickenFeathersFx(Actor self)
	{
		if (!self)
			return;
		
		for (int i = 0; i < 16; i++)
		{
			self.A_SpawnItemEx("SHDX_ChickenFeather", 0, 0, 16, Random[FeatherFx](3.0, 5.0), Random[FeatherFx](3.0, 5.0), Random[FeatherFx](3.0, 5.0), Random[FeatherFx](0.0, 360.0), SXF_ABSOLUTEANGLE);
		}
	}
	
	// Rewriting the DropItem Function to learn some basics of
	// lower-level ZScript coding. Based on
	// https://forum.zdoom.org/viewtopic.php?f=39&t=55409
	void A_SHDX_DropItem(Class<Actor> todrop = "SHDX_SilverBitCoin", bool halveammo = true)
	{
		Actor a = Spawn(todrop, self.pos, ALLOW_REPLACE);
		
		a.bDROPPED = true;
		a.vel.x = Random[ItemDrop](-1, 1);
		a.vel.y = Random[ItemDrop](-1, 1);
		a.vel.z = 8;
		
		let aa = Ammo(a);
		
		if (aa && halveammo)
			aa.amount = int(aa.amount * 0.5);
		
		// a.vel += self.vel;
	}
	
	static double A_SHDX_NormalizeAngle(double ang)
	{
		double ret = ang;
		if (ret < 0)
			ret = 360 - (ret % 360);
		else
			ret = ret % 360;
		
		return ret;
	}
}